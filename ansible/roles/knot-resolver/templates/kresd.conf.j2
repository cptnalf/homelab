-- vim:syntax=lua:
-- Refer to manual: http://knot-resolver.readthedocs.org/en/latest/daemon.html#configuration


-- See kresd.systemd(7) about configuring network interfaces when using systemd
net.listen('127.0.0.1', 53, {kind = 'dns' })
net.listen('::1', 53, {kind = 'dns' })
net.listen('{{ host_internal_addr }}', 53, {kind = 'dns'})

user('knot-resolver', 'knot-resolver')

--[[
modules.load('http')
http.config({
  tls = false
})
net.listen('{{ host_internal_addr }}', 8053, {kind = 'webmgmt'})
--]]

-- Load useful modules
modules = {
  'policy'   -- Block queries to local zones/bad sites
  ,'hints'    -- Load /etc/hosts and allow custom root hints
  ,'stats'    -- Track internal statistics
  ,'predict'  -- Prefetch expiring/frequent records
  ,'serve_stale < cache'
  ,'workarounds < iterate'
}

-- view:addr('127.0.0.1/8', function(req, qry) return policy.PASS end)
-- view:addr('[::1]/128', function(req, qry) return policy.PASS end)
-- view:addr('192.168.9.1/24', function(req, qry) return policy.PASS end)
-- drop the rest.
-- view:addr('0.0.0.0/0', function(req, qry) return policy.DROP end)

-- verbose(true)
-- Cache size
cache.size = 150 * MB

-- dnssec validation
-- trust_anchors.file = '/usr/share/dns/root.key'
-- turn off dnssec validation
--  apparently some domains can't do it.
-- trust_anchors.remove('.')
trust_anchors.set_insecure({ 
    'klingon.alfors.org.'
    , 'klingon.'
    , '9.168.192.in-addr.arpa.'
    , '168.192.in-addr.arpa.'
  })

-- https://www.ctrl.blog/entry/knot-dns-resolver-tutorial                                                    
-- forward lookups for .klingon. to ns.klingon
local klingon_rule = policy.add(policy.suffix(
   policy.STUB({'127.0.0.1@54', '192.168.9.11'})
  ,{todname('klingon.alfors.org.'), todname('9.168.192.in-addr.arpa')}                                       
  ))

-- since this shit isn't working, do the standard.
-- policy.add(policy.all(policy.FORWARD({ '1.1.1.1' }) ) )                                                      
-- '66.18.32.2','1.1.1.1','8.8.8.8'})))

-- forward to cloudflare tls.
policy.add(policy.all(policy.TLS_FORWARD({

  { '8.8.8.8', hostname='dns.google.com'
     ,ca_file='/etc/ssl/certs/ca-certificates.crt'
  }

  ,{'1.1.1.1'
    , hostname="cloudflare-dns.com"
    , ca_file='/etc/knot-resolver/DigiCertECCSecureServerCA.pem'                                             
   }
  ,{'1.0.0.1'
    , hostname="cloudflare-dns.com"
  , ca_file='/etc/knot-resolver/DigiCertECCSecureServerCA.pem'                                                 
   }
  ,{ '9.9.9.9', hostname='dns.quad9.net'
     ,ca_file='/etc/ssl/certs/ca-certificates.crt'
   }
 })
 ))

-- prefetch learning, 20-m blocks over 24 hours
predict.config({ window = 20, period = 72})